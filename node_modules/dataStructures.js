class Node {
    constructor(value, next = null) {
        this.value = value;
        this.next = next;
    }
}
class List {
    constructor() {
        this.head = null;
        this.tail = null;
    }
    add(value) {
        if(this.head == null) {
            this.head = new Node(value);
            this.tail = this.head;
        } else  {
            this.tail.next = new Node(value);
            this.tail = this.tail.next;
        }
    }
    addFirst(value) {
        this.head = new Node(value, this.head);
        if(this.tail == null)
            this.tail = this.head.next;
    }
    removeFirst() {
        if(this.head !== null) {
            this.head = this.head.next;
            if(this.head == null)
                this.tail = null;
        }
    }
    forEach(func) {
        let temp = this.head;
        let index = -1;
        while(temp !== null) {
            func(temp.value, ++index);
            temp = temp.next;
        }
    }
    reduce(func) {
        let res = 0;
        let temp = this.head;
        let index = -1;
        while(temp !== null) {
            res = func(res, temp.value, ++index);
            temp = temp.next;
        }
        return res;
    }
    print() {
        let str = '';
        this.forEach(value => { str += value + ' ';});
        console.log(str);
    }
}
class Stack {
    constructor() {
        this.list = new List();
    }
    push(value) {
        this.list.addFirst(value);
    }
    unshift(value) {
        this.list.add(value);
    }
    popFirst() {
        return this.list;
    }
    top() {
        if(!this.isEmpty())
            return this.list.head.value;
        return null;
    }
    pop() {
        if(!this.isEmpty()) {
            let top = this.top();
            this.list.removeFirst();
            return top;
        }
        return null;
    }
    isEmpty() {
        return this.list.head == null;
    }
    print() {
        this.list.print();
    }
    toString() {
        let str = '';
        this.list.forEach(value => { str += value + ' ';});
        return str;
    }
    printRevrse() {
        let temp = new Stack();
        while(!this.isEmpty())
            temp.push(this.pop());
        temp.print();
        while(!temp.isEmpty())
            this.push(temp.pop());
    }
    reverseString() {
        let temp = new Stack();
        while(!this.isEmpty())
            temp.push(this.pop());
        let res = temp.toString();
        while(!temp.isEmpty())
            this.push(temp.pop());
        return res;
    }
}
exports.Node = Node;
exports.List = List;
exports.Stack = Stack;