const utility = require('utility');

class WordIterator {
    constructor(string) {
        this.string = string.trim();
        this.wordIndex = 0;
        this.words = [];
        this.wordsReverse = [];
        this.wordIndexReverse = this.string.length - 1;
    }

    nextWord() {
        let temp = utility.firstWSCharIndex(this.string, this.wordIndex);
        if (temp == -1) {
            if (this.wordIndex == this.string.length - 1)
                return null;
            this.words.push( {
                word: this.string.substring(this.wordIndex, this.string.length),
                startingIndex: this.wordIndex,
                endingIndex: this.string.length - 1
            });
            this.wordIndex = this.string.length - 1;
        } else {
            this.words.push( {
                word: this.string.substring(this.wordIndex, temp),
                startingIndex: this.wordIndex,
                endingIndex: temp - 1
            });
            this.wordIndex = temp + 1;
        }
        return this.words[this.words.length - 1];
    }

    nextWordReverse() {
        let temp = utility.lastWSCharIndex(this.string, 0, this.wordIndexReverse);
        if (temp == -1) {
            if (this.wordIndexReverse == 0)
                return null;
            this.wordsReverse.push( {
                word: this.string.substring(0, this.wordIndexReverse + 1),
                startingIndex: 0,
                endingIndex: this.wordIndexReverse
            });
            this.wordIndexReverse = 0;
        } else {
            this.wordsReverse.push( {
                word: this.string.substring(temp + 1, this.wordIndexReverse + 1),
                startingIndex: temp + 1,
                endingIndex: this.wordIndexReverse
            });
            this.wordIndexReverse = temp - 1;
        }
        return this.wordsReverse[this.wordsReverse.length - 1];
    }

    nthWord(n) {
        if (n <= 0) return null;
        let i = 0;
        while (i++ < n && this.nextWord() != null);
        return this.words[n - 1];
    }

    lastWord() {
        while (this.nextWord() !== null);
        return this.words[this.words.length - 1];
    }

    foreachWord(func) {
        let word;
        let index = 0;
        while ((word = wi.nextWord()) !== null) {
            func(word, index);
            index++;
        }
    }

    evalAllWords() {
        while (wi.nextWord() !== null) ;
    }
}

exports.WordIterator = WordIterator;