const { firstNonWSCharIndex } = require('utility');

class CPPClass {
    constructor(name, methods) {
        this.name = name;
        this.methods = methods;
    }
    toImplementationString() {
        // TODO add option for custom headers name
        // TODO add auto documentation
        let implementationString = '#include "headers/' + this.name.toLowerCase() + '.h"\n\n';
        this.methods.forEach(method => {
            implementationString += method.toImplementationString() + '\n';
        });
        return implementationString;
    }
    static removeClassName(classSource) {
        let openCurlyBracketIndex = classSource.indexOf('{');
        let startingIndex = firstNonWSCharIndex(classSource, openCurlyBracketIndex + 1);
        let endIndex = classSource.lastIndexOf('}');
        return classSource.substring(startingIndex, endIndex);
    }
}
exports.CPPClass = CPPClass;