const { firstNonWSCharIndex, firstWSCharIndex } = require('utility');
class CPPClassMethod {
    constructor(className, name, returnType, parameters, isSpecialMember = false) {
        this.className = className;
        this.name = name;
        this.returnType = returnType;
        this.parameters = parameters;
        this.isSpecialMember = isSpecialMember;
    }
    toImplementationString() {
        let parametersString = '';
        this.parameters.forEach(parameter => {
            parametersString += parameter.toString() + ', ';
        });
        if (this.parameters.length !== 0) {
            // remove trailing ', '
            parametersString = parametersString.substring(0, parametersString.length - 2);
        }
        if (!this.isSpecialMember)
            return this.returnType + ' ' + this.className + '::' + this.name + '(' + parametersString + ') {\n\t\n}';
        return this.className + '::' + this.name + '(' + parametersString + ') {\n\t\n}';
    }
    // assume syntax is good. special member is a constructor or a destructor
    static isSpecialMember(string) {
        // className(parameterType parameter1,....)
        // assume className really do fits the surrounding className since compilation is good
        return string.search(/[a-zA-Z_$][a-zA-Z_$0-9]*\(.*\)/) !== -1;
    }
    // assume syntax is good
    static isMethodDeclaration(string) {
        // returnType name(parameterType parameter1,....)
        return string.search(/[a-zA-Z_$][a-zA-Z_$0-9]*\s+[a-zA-Z_$][a-zA-Z_$0-9]*\(.*\)/) !== -1;
    }
    // TODO consider doing also the parse methods with regex
    // assume string is a valid method. can be checked with CPPClassMethod.isMethodDeclaration
    static parseMethod(className, string) {
        // returnType name(parameterType parameter1,....)
        let returnTypeEnd = firstWSCharIndex(string) - 1;
        let nameStart = firstNonWSCharIndex(string, returnTypeEnd + 1);
        // handles cases where the decleration is like this
        // returnType name   (parameterType parameter1,....);
        let nameEnd = string.indexOf('(', nameStart) - 1;
        
        let parameterListStart = string.indexOf('(', nameEnd);
        // to handle cases like
        // Rectangle(Point topLeft   , int width, int height, Color&& color = Color(0.9f,0.9f,0.9f));
        let parameterListEnd = string.lastIndexOf(')');

        let returnType = string.substring(0, returnTypeEnd + 1);
        let name = string.substring(nameStart, nameEnd + 1);
        let parameterList = CPPClassMethod.parseParameterList(string.substring(parameterListStart, parameterListEnd + 1));
        return new CPPClassMethod(className, name, returnType, parameterList);
    }
    // assume string is a valid special member. special member is a constructor
    // or a destructor can be checked with CPPClassMethod.isMethodDeclaration
    static parseSpecialMember(className, string) {
        // className(parameterType parameter1,....)
        // assume className really do fits the surrounding className since compilation is good
        let nameEnd = string.indexOf('(') - 1;
        let parameterListStart = nameEnd + 1;
        let parameterListEnd = string.lastIndexOf(')');

        let name = string.substring(0, nameEnd + 1);
        let parameterList = CPPClassMethod.parseParameterList(string.substring(parameterListStart, parameterListEnd + 1));
        return new CPPClassMethod(className, name, null, parameterList, true);
    }
    // assume syntax is valid
    static parseParameterList(parameterList) {
        // handles cases where there are default parameters,
        // e.g. (Point topLeft   , int width, int height, Color&& color = Color(0.9f,0.9f,0.9f));
        parameterList = parameterList.substring(1, parameterList.length - 1); // trim both edges
        parameterList = CPPClassMethod.removeDefaultValues(parameterList);
        let parameters = parameterList.split(',');
        parameters.forEach((parameter, i) => {
            parameters[i] = parameter.trim();
        });
        return parameters;
    }
    // removes default values from a parameter list
    static removeDefaultValues(parameterList) {
        let output = '';
        let regEx = /=/g;
        let res;
        let prev = 0;
        while((res = regEx.exec(parameterList)) !== null) {
            output += parameterList.substring(prev, res.index);
            prev = parameterList.indexOf(',', res.index);
        }
        if (output == '')
            output = parameterList
        return output;
    }
}
exports.CPPClassMethod = CPPClassMethod;